from urllib.parse import urlparse
from time import time
import requests
import hashlib
import json


class Blockchain(object):
    def __init__(self) -> None:
        self.chain = []
        self.current_transactions = []
        self.nodes = set()
        # the very first block
        self.new_block(previous_hash=1, proof=100)

    @property
    def last_block(self):
        return self.chain[-1]

    @staticmethod
    def hash(block: dict) -> str:
        """Generate a sha-256 value for the block

        Args:
            block (dict): target block

        Returns:
            str: sha-256 value
        """
        # make sure the block is SORTED! otherwise we can't get corresponding hash value
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    @staticmethod
    def valid_proof(last_proof: int, proof: int) -> bool:
        """Proof: does hash(last_proof, proof) contain 4 leading 0?

        Args:
            last_proof (int): previous proof
            proof (int): current proof

        Returns:
            bool: valid or not
        """
        guess = f"{last_proof}{proof}".encode()
        guess_hash = hashlib.sha256(guess).hexdigest()
        return guess_hash[:4] == "0000"

    def new_block(self, proof: int, previous_hash=None) -> dict:
        """Create a new block into blockchain

        Args:
            proof (int): proof generated by PoW algorithm
            previous_hash (str, optional): hash value of the former block. Defaults to None.

        Returns:
            dict: description of a new block
        """
        block = {
            "index": len(self.chain) + 1,
            "timestamp": time(),
            "transactions": self.current_transactions,
            "proof": proof,
            "previous_hash": previous_hash or self.hash(self.chain[-1]),
        }

        # 重置当前交易记录
        self.current_transactions = []

        self.chain.append(block)
        return block

    def new_transaction(self, sender: str, recipient: str, amount: str) -> int:
        """Creates a new transaction to the next mined block

        Args:
            sender (str): address of the sender
            recipient (str): address of the recipient
            amount (int): amount of the transaction

        Returns:
            int: the index of the block holding this transaction
        """
        self.current_transactions.append(
            {
                "sender": sender,
                "recipient": recipient,
                "amount": amount,
            }
        )

        return self.last_block["index"] + 1

    def proof_of_work(self, last_proof: int) -> int:
        """PoW algorithm, generate a new proof based on previous proof

        Args:
            last_proof (int): previous proof

        Returns:
            int: new proof
        """
        proof = 0
        while self.valid_proof(last_proof, proof) is False:
            proof += 1

        return proof

    def register_node(self, address: str):
        """Add a new node to the list of nodes

        Args:
            address (str): address of node, eg. http://127.0.0.1:5000
        """
        parsed_url = urlparse(address)
        self.nodes.add(parsed_url.netloc)

    def valid_chain(self, chain: list) -> bool:
        """Determine if a blockchain is valid by looking hash and PoW

        Args:
            chain (list): a certain blockchain

        Returns:
            bool: valid or not
        """
        last_block = chain[0]
        current_index = 1

        while current_index < len(chain):
            block = chain[current_index]
            print(f"{last_block}")
            print(f"{block}")
            print("\n-----------\n")
            # Check that the hash of the block is correct
            if block["previous_hash"] != self.hash(last_block):
                return False

            # Check that the Proof of Work is correct
            if not self.valid_proof(last_block["proof"], block["proof"]):
                return False

            last_block = block
            current_index += 1

        return True

    def resolve_conflicts(self):
        """Resolves conflict by replacing chain with the longest chain

        Returns:
            bool: True if this chain is replaced
        """
        neighbours = self.nodes
        new_chain = None

        # only look for chains longer than ours
        max_length = len(self.chain)

        # Grab and verify the chains from all the nodes in our network
        for node in neighbours:
            response = requests.get(f"http://{node}/chain")

            if response.status_code == 200:
                length = response.json()["length"]
                chain = response.json()["chain"]

                # Check if the length is longer and the chain is valid
                if length > max_length and self.valid_chain(chain):
                    max_length = length
                    new_chain = chain

        # Replace our chain if we discovered a new, valid chain longer than ours
        if new_chain:
            self.chain = new_chain
            return True

        return False
